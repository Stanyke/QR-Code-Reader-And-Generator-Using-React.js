{"version":3,"sources":["components/Generator.js","Helpers/Scanner.js","components/Reader.js","App.js","index.js"],"names":["QRCode","require","Generator","props","submitInputValue","event","preventDefault","canvas","document","getElementById","failedParagraph","toCanvas","state","userInput","error","console","style","display","className","to","class","type","data-toggle","data-target","id","onSubmit","this","placeholder","onChange","e","setState","target","value","required","align","Component","QR_Code_Scanner","qrcode","window","video","createElement","canvasElement","getContext","qrResult","outputData","btnScanQR","scanning","tick","height","videoHeight","width","videoWidth","drawImage","requestAnimationFrame","scan","decode","setTimeout","callback","res","innerText","srcObject","getTracks","forEach","track","stop","hidden","onclick","navigator","mediaDevices","getUserMedia","facingMode","then","stream","setAttribute","play","Reader","originalConsole","api","Object","keys","i","length","App","path","exact","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c17b2fd1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nconst QRCode = require('qrcode')\r\n\r\nexport default class Generator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            userInput: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.getElementById('failedParagraph').style.display = 'none'\r\n        document.getElementById('canvas').style.display = 'none'\r\n    }\r\n    \r\n    render() {\r\n        const styles = {\"color\": \"#ffffff\"}\r\n        return (\r\n            <div>\r\n                <div className=\"pb-5\">\r\n                    <nav className=\"navbar navbar-expand-sm fixed-top d-flex justify-content-center align-items-center\">\r\n                        <Link className=\"navbar-brand text-danger\" to=\"/\">\r\n                        QR Code Generator/Scanner\r\n                        </Link>\r\n\r\n                        <button\r\n                        class=\"navbar-toggler navbar-dark\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#collapsibleNavbar\"\r\n                        >\r\n                        <span class=\"navbar-toggler-icon\" style={styles}></span>\r\n                        </button>\r\n                        <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n                        <ul class=\"navbar-nav ml-auto\">\r\n                            <br/>\r\n                            <li class=\"nav-item\">\r\n                            <Link className=\"btn btn-primary nav-link p-2\" to=\"/scanner\">\r\n                                QR Code Scanner\r\n                            </Link>\r\n                            </li>\r\n                        </ul>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"container\">\r\n\r\n                    <h2 class=\"text-center text-primary\">QR Code Generator</h2>\r\n                    \r\n                    <div class=\"generatorPage\">\r\n                        \r\n\r\n                        <form className=\"pt-3\" onSubmit={this.submitInputValue}>\r\n                            <input type=\"text\" placeholder=\"Type then hit the button/Enter key\" onChange={(e) => this.setState({userInput: e.target.value})} className=\"form-control\" required />\r\n\r\n                            <button type=\"submit\" className=\"mt-4 form-control btn btn-danger\">Submit</button>\r\n                        </form>\r\n\r\n                        <div align=\"center\" className=\"pt-3\"><canvas id=\"canvas\"></canvas></div>\r\n                        \r\n                        <p className=\"pt-3\" id=\"failedParagraph\">Failed to load QR Code, try again.</p>\r\n\r\n                    </div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n\r\n    submitInputValue = (event) => {\r\n        event.preventDefault();\r\n\r\n        let canvas = document.getElementById('canvas')\r\n        let failedParagraph = document.getElementById('failedParagraph')\r\n\r\n        \r\n        QRCode.toCanvas(canvas, this.state.userInput, (error) => {\r\n            if(error){\r\n                console.error(error)\r\n                canvas.style.display = 'none';\r\n                failedParagraph.style.display = 'block'\r\n            }\r\n            else{\r\n                canvas.style.display = 'block';\r\n                failedParagraph.style.display = 'none'\r\n            }\r\n        })\r\n    }\r\n}\r\n","const QR_Code_Scanner = () => {\r\n    const qrcode = window.qrcode;\r\n\r\n    const video = document.createElement(\"video\");\r\n    const canvasElement = document.getElementById(\"qr-canvas\");\r\n    const canvas = canvasElement.getContext(\"2d\");\r\n\r\n    const qrResult = document.getElementById(\"qr-result\");\r\n    const outputData = document.getElementById(\"outputData\");\r\n    const btnScanQR = document.getElementById(\"btn-scan-qr\");\r\n\r\n    let scanning = false;\r\n\r\n    qrcode.callback = res => {\r\n    if (res) {\r\n        outputData.innerText = res;\r\n        //console.log(res)\r\n        scanning = false;\r\n\r\n        video.srcObject.getTracks().forEach(track => {\r\n        track.stop();\r\n        });\r\n\r\n        qrResult.hidden = false;\r\n        canvasElement.hidden = true;\r\n        btnScanQR.hidden = false;\r\n    }\r\n    };\r\n\r\n    btnScanQR.onclick = () => {\r\n    navigator.mediaDevices\r\n        .getUserMedia({ video: { facingMode: \"environment\" } })\r\n        .then(function(stream) {\r\n        scanning = true;\r\n        qrResult.hidden = true;\r\n        btnScanQR.hidden = true;\r\n        canvasElement.hidden = false;\r\n        video.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\r\n        video.srcObject = stream;\r\n        video.play();\r\n        tick();\r\n        scan();\r\n        });\r\n    };\r\n\r\n    function tick() {\r\n    canvasElement.height = video.videoHeight;\r\n    canvasElement.width = video.videoWidth;\r\n    canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\r\n\r\n    scanning && requestAnimationFrame(tick);\r\n    }\r\n\r\n    function scan() {\r\n    try {\r\n        qrcode.decode();\r\n    } catch (e) {\r\n        setTimeout(scan, 300);\r\n    }\r\n    }\r\n\r\n}\r\n\r\nexport default QR_Code_Scanner;","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport QR_Code_Scanner from '../Helpers/Scanner';\r\n\r\nexport default class Reader extends Component {\r\n\r\n    componentDidMount(){\r\n        QR_Code_Scanner()\r\n\r\n        //Disable console.log file returned from the qr_packed.js in the index.html page in public directory\r\n        window.console = (function(originalConsole){\r\n            var api = {};\r\n            var props = Object.keys(originalConsole);\r\n            for (var i=0; i<props.length; i++) {\r\n                api[props[i]] = function(){};\r\n            }\r\n            return api;\r\n        })(window.console);\r\n    }\r\n\r\n    render() {\r\n        const styles = {\"color\": \"#ffffff\"}\r\n        return (\r\n            <div>\r\n                <div className=\"pb-5\">\r\n                    <nav className=\"navbar navbar-expand-sm fixed-top d-flex justify-content-center align-items-center\">\r\n                        <Link className=\"navbar-brand text-danger\" to=\"/\">\r\n                        QR Code Generator/Scanner\r\n                        </Link>\r\n\r\n                        <button\r\n                        class=\"navbar-toggler navbar-dark\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#collapsibleNavbar\"\r\n                        >\r\n                        <span class=\"navbar-toggler-icon\" style={styles}></span>\r\n                        </button>\r\n                        <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n                        <ul class=\"navbar-nav ml-auto\">\r\n                            <br/>\r\n                            <li class=\"nav-item\">\r\n                            <Link className=\"btn btn-primary nav-link p-2\" to=\"/\">\r\n                                QR Code Generator\r\n                            </Link>\r\n                            </li>\r\n                        </ul>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"container mb-5\">\r\n\r\n                    <h2 class=\"text-center text-primary\">QR Code Scanner</h2>\r\n                    \r\n                    <div align=\"center\">\r\n                        <canvas hidden=\"\" id=\"qr-canvas\"></canvas>\r\n                    </div>\r\n                    \r\n                    <div id=\"qr-result\" hidden=\"true\">\r\n                        <span id=\"outputData\"></span>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n                <button className=\"scanButton fixed-bottom\" id=\"btn-scan-qr\">Scan QR Code</button>\r\n\r\n           </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Generator from \"./components/Generator\"\nimport Reader from \"./components/Reader\"\n\nfunction App() {\n  return (\n\n    <Router>\n      <div className=\"App\">\n        <Route path=\"/\" exact component={Generator} />\n        <Route path=\"/scanner\" component={Reader} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}